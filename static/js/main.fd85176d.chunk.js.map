{"version":3,"sources":["algorhitms/djikstra.js","node.jsx","visualizer.jsx","App.js","index.js"],"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","row","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","col","filter","neighbor","getUnvisitedNeighbors","previousNode","Node","isStart","isEnd","extra","wall","visited","id","className","PathfinderVisualizer","useState","makeNodes","animateDijkstra","nodesInShortestPathOrder","i","setTimeout","document","getElementById","animateShortestPath","onClick","endNode","currentNode","unshift","getNodesInShortestPathOrder","visualizeDijkstra","map","rowIndex","key","colIndex","j","createNode","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fd85176d.chunk.js","sourcesContent":["/// Performs Dijkstra's algorithm\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n\n  // always settings the starting nodes distance to 0\n  startNode.distance = 0;\n\n  // get all non visited nodes\n  const unvisitedNodes = getAllNodes(grid);\n\n  // and go through them one by one\n  while (!!unvisitedNodes.length) {\n    // sorting by distance\n    sortNodesByDistance(unvisitedNodes);\n\n    // start at first node\n    const closestNode = unvisitedNodes.shift();\n\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nexport default function Node({ row, col, isStart, isEnd, wall, visited }) {\n  const extra = isStart ? \"node-start\" : isEnd ? \"node-end\" : \"\";\n\n  return <div id={`node-${row}-${col}`} className={`node ${extra}`}></div>;\n}\n","import React, { useState } from \"react\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"./algorhitms/djikstra\";\nimport Node from \"./node\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 5;\nconst END_NODE_ROW = 10;\nconst END_NODE_COL = 20;\n\nexport default function PathfinderVisualizer() {\n  const [nodes, setNodes] = useState(makeNodes);\n\n  function animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  function animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n  function visualizeDijkstra() {\n    const startNode = nodes[START_NODE_ROW][START_NODE_COL];\n    const endNode = nodes[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = dijkstra(nodes, startNode, endNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(endNode);\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  return (\n    <div>\n      <div className=\"button-row\">\n        {/* <button onClick={() => setNodes(makeNodes)}>Reset</button> */}\n        <button onClick={() => visualizeDijkstra()}>Djikstra's</button>\n      </div>\n      <div className=\"node-grid\">\n        {nodes.map((row, rowIndex) => {\n          return (\n            <div className={rowIndex} key={rowIndex}>\n              {row.map((node, colIndex) => {\n                const { row, col, isStart, isEnd, wall } = node;\n                return (\n                  <Node\n                    key={colIndex}\n                    row={row}\n                    col={col}\n                    isStart={isStart}\n                    isEnd={isEnd}\n                    wall={wall}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst makeNodes = () => {\n  let grid = [];\n  for (let i = 0; i < 25; i++) {\n    let row = [];\n    for (let j = 0; j < 25; j++) row.push(createNode(i, j));\n    grid.push(row);\n  }\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row,\n    col,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isEnd: row === END_NODE_ROW && col === END_NODE_COL,\n    distance: Infinity,\n    visited: false,\n    wall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfinderVisualizer from \"./visualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfinderVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}